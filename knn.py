# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Myb-7TC0vFih2lckP3x7D_oERCWuTl11
"""

#Import librarys
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
#collecting Data
df = pd.read_csv('/content/Employee.csv')

#Exploring data
# Display first few rows of the dataframe
print("First few rows of the dataframe:")
print(df.head())

# Display information about the dataframe
print("\nInformation about the dataframe:")
print(df.info())

# Display summary statistics of the dataframe
print("\nSummary statistics of the dataframe:")
print(df.describe())

# Display column names
print("\nColumn names:")
print(df.columns)

# Display index information
print("\nIndex information:")
print(df.index)
# Count the number of unique names in the 'City' column
name_column = df['City']
unique_names_count = name_column.nunique()
print("\nNumber of unique names in the 'City' column:", unique_names_count)
# Count the frequency of each name in the 'City' column
names_counts = name_column.value_counts()
print("\nFrequency of each name in the 'City' column:")
print(names_counts)

# Check for missing values
print("\nMissing values in the dataframe:")
print(df.isnull().sum())
# Replace categorical values with numerical values
df['Education'].replace({'Bachelors':1, 'Masters':2, 'PHD':3}, inplace=True)
df['Gender'].replace({'Male':1, 'Female':2}, inplace=True)
df['EverBenched'].replace({'Yes':1, 'No':0}, inplace=True)
df['City'].replace({'Bangalore':1, 'Pune':2, 'New Delhi':3}, inplace=True)

# Display last few rows of the dataframe after replacing categorical values
print("\nLast few rows of the dataframe after replacing categorical values:")
print(df.tail())

# Split the data into features (X) and target variable (y)
X = df.drop('LeaveOrNot', axis=1)
y = df['LeaveOrNot']
X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.2,random_state=42)
Knn = KNeighborsClassifier(n_neighbors=5)
Knn.fit(X_train,Y_train)

# Evaluate the model
y_pred = Knn.predict(X_test)
accuracy = accuracy_score(Y_test,y_pred)

accuracy

